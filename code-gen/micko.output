Terminals unused in grammar

    _TEST


Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: ε

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body

    6 $@2: ε

    7 lambda_statement: _LAMBDA _ID $@2 _ASSIGN lambda_exp

    8 $@3: ε

    9 lambda_exp: _LAMBDA _LPAREN lambda_parameters $@3 _RPAREN _COLON num_exp _SEMICOLON

   10 lambda_parameters: lambda_parameter
   11                  | lambda_parameters _COMMA lambda_parameter

   12 lambda_parameter: _TYPE _ID

   13 parameter: ε
   14          | _TYPE _ID

   15 $@4: ε

   16 body: _LBRACKET variable_list $@4 statement_list _RBRACKET

   17 variable_list: ε
   18              | variable_list variable

   19 variable: _TYPE _ID _SEMICOLON

   20 statement_list: ε
   21               | statement_list statement

   22 statement: compound_statement
   23          | assignment_statement
   24          | if_statement
   25          | return_statement
   26          | lambda_statement

   27 compound_statement: _LBRACKET statement_list _RBRACKET

   28 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   29 num_exp: exp
   30        | num_exp _AROP exp

   31 exp: literal
   32    | _ID
   33    | lambda_call
   34    | function_call
   35    | _LPAREN num_exp _RPAREN

   36 literal: _INT_NUMBER
   37        | _UINT_NUMBER

   38 $@5: ε

   39 function_call: _ID $@5 _LPAREN argument _RPAREN

   40 $@6: ε

   41 lambda_call: _ID _RARROW $@6 _LPAREN lambda_arguments _RPAREN

   42 lambda_arguments: lambda_argument
   43                 | lambda_arguments _COMMA lambda_argument

   44 lambda_argument: num_exp

   45 argument: ε
   46         | num_exp

   47 if_statement: if_part
   48             | if_part _ELSE statement

   49 @7: ε

   50 $@8: ε

   51 if_part: _IF _LPAREN @7 rel_exp $@8 _RPAREN statement

   52 rel_exp: num_exp _RELOP num_exp

   53 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _TYPE <i> (258) 5 12 14 19
    _IF (259) 51
    _ELSE (260) 48
    _RETURN (261) 53
    _ID <s> (262) 5 7 12 14 19 28 32 39 41
    _INT_NUMBER <s> (263) 36
    _UINT_NUMBER <s> (264) 37
    _LPAREN (265) 5 9 35 39 41 51
    _RPAREN (266) 5 9 35 39 41 51
    _LBRACKET (267) 16 27
    _RBRACKET (268) 16 27
    _ASSIGN (269) 7 28
    _SEMICOLON (270) 9 19 28 53
    _AROP <i> (271) 30
    _RELOP <i> (272) 52
    _LAMBDA (273) 7 9
    _COLON (274) 9
    _COMMA (275) 11 43
    _RARROW (276) 41
    _TEST (277)
    ONLY_IF (278)


Nonterminals, with rules where they appear

    $accept (24)
        on left: 0
    program (25)
        on left: 1
        on right: 0
    function_list (26)
        on left: 2 3
        on right: 1 3
    function (27)
        on left: 5
        on right: 2 3
    $@1 (28)
        on left: 4
        on right: 5
    lambda_statement (29)
        on left: 7
        on right: 26
    $@2 (30)
        on left: 6
        on right: 7
    lambda_exp (31)
        on left: 9
        on right: 7
    $@3 (32)
        on left: 8
        on right: 9
    lambda_parameters (33)
        on left: 10 11
        on right: 9 11
    lambda_parameter <i> (34)
        on left: 12
        on right: 10 11
    parameter (35)
        on left: 13 14
        on right: 5
    body (36)
        on left: 16
        on right: 5
    $@4 (37)
        on left: 15
        on right: 16
    variable_list (38)
        on left: 17 18
        on right: 16 18
    variable (39)
        on left: 19
        on right: 18
    statement_list (40)
        on left: 20 21
        on right: 16 21 27
    statement (41)
        on left: 22 23 24 25 26
        on right: 21 48 51
    compound_statement (42)
        on left: 27
        on right: 22
    assignment_statement (43)
        on left: 28
        on right: 23
    num_exp <i> (44)
        on left: 29 30
        on right: 9 28 30 35 44 46 52 53
    exp <i> (45)
        on left: 31 32 33 34 35
        on right: 29 30
    literal <i> (46)
        on left: 36 37
        on right: 31
    function_call <i> (47)
        on left: 39
        on right: 34
    $@5 (48)
        on left: 38
        on right: 39
    lambda_call <i> (49)
        on left: 41
        on right: 33
    $@6 (50)
        on left: 40
        on right: 41
    lambda_arguments (51)
        on left: 42 43
        on right: 41 43
    lambda_argument <i> (52)
        on left: 44
        on right: 42 43
    argument <i> (53)
        on left: 45 46
        on right: 39
    if_statement (54)
        on left: 47 48
        on right: 24
    if_part <i> (55)
        on left: 51
        on right: 47 48
    @7 (56)
        on left: 49
        on right: 51
    $@8 (57)
        on left: 50
        on right: 51
    rel_exp <i> (58)
        on left: 52
        on right: 51
    return_statement (59)
        on left: 53
        on right: 25


State 0

    0 $accept: • program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4


State 1

    5 function: _TYPE • _ID $@1 _LPAREN parameter _RPAREN body

    _ID  shift, and go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: function_list •
    3 function_list: function_list • function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7


State 4

    2 function_list: function •

    $default  reduce using rule 2 (function_list)


State 5

    5 function: _TYPE _ID • $@1 _LPAREN parameter _RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 8


State 6

    0 $accept: program $end •

    $default  accept


State 7

    3 function_list: function_list function •

    $default  reduce using rule 3 (function_list)


State 8

    5 function: _TYPE _ID $@1 • _LPAREN parameter _RPAREN body

    _LPAREN  shift, and go to state 9


State 9

    5 function: _TYPE _ID $@1 _LPAREN • parameter _RPAREN body

    _TYPE  shift, and go to state 10

    $default  reduce using rule 13 (parameter)

    parameter  go to state 11


State 10

   14 parameter: _TYPE • _ID

    _ID  shift, and go to state 12


State 11

    5 function: _TYPE _ID $@1 _LPAREN parameter • _RPAREN body

    _RPAREN  shift, and go to state 13


State 12

   14 parameter: _TYPE _ID •

    $default  reduce using rule 14 (parameter)


State 13

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN • body

    _LBRACKET  shift, and go to state 14

    body  go to state 15


State 14

   16 body: _LBRACKET • variable_list $@4 statement_list _RBRACKET

    $default  reduce using rule 17 (variable_list)

    variable_list  go to state 16


State 15

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body •

    $default  reduce using rule 5 (function)


State 16

   16 body: _LBRACKET variable_list • $@4 statement_list _RBRACKET
   18 variable_list: variable_list • variable

    _TYPE  shift, and go to state 17

    $default  reduce using rule 15 ($@4)

    $@4       go to state 18
    variable  go to state 19


State 17

   19 variable: _TYPE • _ID _SEMICOLON

    _ID  shift, and go to state 20


State 18

   16 body: _LBRACKET variable_list $@4 • statement_list _RBRACKET

    $default  reduce using rule 20 (statement_list)

    statement_list  go to state 21


State 19

   18 variable_list: variable_list variable •

    $default  reduce using rule 18 (variable_list)


State 20

   19 variable: _TYPE _ID • _SEMICOLON

    _SEMICOLON  shift, and go to state 22


State 21

   16 body: _LBRACKET variable_list $@4 statement_list • _RBRACKET
   21 statement_list: statement_list • statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 27
    _LAMBDA    shift, and go to state 28

    lambda_statement      go to state 29
    statement             go to state 30
    compound_statement    go to state 31
    assignment_statement  go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 22

   19 variable: _TYPE _ID _SEMICOLON •

    $default  reduce using rule 19 (variable)


State 23

   51 if_part: _IF • _LPAREN @7 rel_exp $@8 _RPAREN statement

    _LPAREN  shift, and go to state 36


State 24

   53 return_statement: _RETURN • num_exp _SEMICOLON

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40

    num_exp        go to state 41
    exp            go to state 42
    literal        go to state 43
    function_call  go to state 44
    lambda_call    go to state 45


State 25

   28 assignment_statement: _ID • _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 46


State 26

   27 compound_statement: _LBRACKET • statement_list _RBRACKET

    $default  reduce using rule 20 (statement_list)

    statement_list  go to state 47


State 27

   16 body: _LBRACKET variable_list $@4 statement_list _RBRACKET •

    $default  reduce using rule 16 (body)


State 28

    7 lambda_statement: _LAMBDA • _ID $@2 _ASSIGN lambda_exp

    _ID  shift, and go to state 48


State 29

   26 statement: lambda_statement •

    $default  reduce using rule 26 (statement)


State 30

   21 statement_list: statement_list statement •

    $default  reduce using rule 21 (statement_list)


State 31

   22 statement: compound_statement •

    $default  reduce using rule 22 (statement)


State 32

   23 statement: assignment_statement •

    $default  reduce using rule 23 (statement)


State 33

   24 statement: if_statement •

    $default  reduce using rule 24 (statement)


State 34

   47 if_statement: if_part •
   48             | if_part • _ELSE statement

    _ELSE  shift, and go to state 49

    $default  reduce using rule 47 (if_statement)


State 35

   25 statement: return_statement •

    $default  reduce using rule 25 (statement)


State 36

   51 if_part: _IF _LPAREN • @7 rel_exp $@8 _RPAREN statement

    $default  reduce using rule 49 (@7)

    @7  go to state 50


State 37

   32 exp: _ID •
   39 function_call: _ID • $@5 _LPAREN argument _RPAREN
   41 lambda_call: _ID • _RARROW $@6 _LPAREN lambda_arguments _RPAREN

    _RARROW  shift, and go to state 51

    _LPAREN   reduce using rule 38 ($@5)
    $default  reduce using rule 32 (exp)

    $@5  go to state 52


State 38

   36 literal: _INT_NUMBER •

    $default  reduce using rule 36 (literal)


State 39

   37 literal: _UINT_NUMBER •

    $default  reduce using rule 37 (literal)


State 40

   35 exp: _LPAREN • num_exp _RPAREN

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40

    num_exp        go to state 53
    exp            go to state 42
    literal        go to state 43
    function_call  go to state 44
    lambda_call    go to state 45


State 41

   30 num_exp: num_exp • _AROP exp
   53 return_statement: _RETURN num_exp • _SEMICOLON

    _SEMICOLON  shift, and go to state 54
    _AROP       shift, and go to state 55


State 42

   29 num_exp: exp •

    $default  reduce using rule 29 (num_exp)


State 43

   31 exp: literal •

    $default  reduce using rule 31 (exp)


State 44

   34 exp: function_call •

    $default  reduce using rule 34 (exp)


State 45

   33 exp: lambda_call •

    $default  reduce using rule 33 (exp)


State 46

   28 assignment_statement: _ID _ASSIGN • num_exp _SEMICOLON

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40

    num_exp        go to state 56
    exp            go to state 42
    literal        go to state 43
    function_call  go to state 44
    lambda_call    go to state 45


State 47

   21 statement_list: statement_list • statement
   27 compound_statement: _LBRACKET statement_list • _RBRACKET

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 57
    _LAMBDA    shift, and go to state 28

    lambda_statement      go to state 29
    statement             go to state 30
    compound_statement    go to state 31
    assignment_statement  go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 48

    7 lambda_statement: _LAMBDA _ID • $@2 _ASSIGN lambda_exp

    $default  reduce using rule 6 ($@2)

    $@2  go to state 58


State 49

   48 if_statement: if_part _ELSE • statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _LAMBDA    shift, and go to state 28

    lambda_statement      go to state 29
    statement             go to state 59
    compound_statement    go to state 31
    assignment_statement  go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 50

   51 if_part: _IF _LPAREN @7 • rel_exp $@8 _RPAREN statement

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40

    num_exp        go to state 60
    exp            go to state 42
    literal        go to state 43
    function_call  go to state 44
    lambda_call    go to state 45
    rel_exp        go to state 61


State 51

   41 lambda_call: _ID _RARROW • $@6 _LPAREN lambda_arguments _RPAREN

    $default  reduce using rule 40 ($@6)

    $@6  go to state 62


State 52

   39 function_call: _ID $@5 • _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 63


State 53

   30 num_exp: num_exp • _AROP exp
   35 exp: _LPAREN num_exp • _RPAREN

    _RPAREN  shift, and go to state 64
    _AROP    shift, and go to state 55


State 54

   53 return_statement: _RETURN num_exp _SEMICOLON •

    $default  reduce using rule 53 (return_statement)


State 55

   30 num_exp: num_exp _AROP • exp

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40

    exp            go to state 65
    literal        go to state 43
    function_call  go to state 44
    lambda_call    go to state 45


State 56

   28 assignment_statement: _ID _ASSIGN num_exp • _SEMICOLON
   30 num_exp: num_exp • _AROP exp

    _SEMICOLON  shift, and go to state 66
    _AROP       shift, and go to state 55


State 57

   27 compound_statement: _LBRACKET statement_list _RBRACKET •

    $default  reduce using rule 27 (compound_statement)


State 58

    7 lambda_statement: _LAMBDA _ID $@2 • _ASSIGN lambda_exp

    _ASSIGN  shift, and go to state 67


State 59

   48 if_statement: if_part _ELSE statement •

    $default  reduce using rule 48 (if_statement)


State 60

   30 num_exp: num_exp • _AROP exp
   52 rel_exp: num_exp • _RELOP num_exp

    _AROP   shift, and go to state 55
    _RELOP  shift, and go to state 68


State 61

   51 if_part: _IF _LPAREN @7 rel_exp • $@8 _RPAREN statement

    $default  reduce using rule 50 ($@8)

    $@8  go to state 69


State 62

   41 lambda_call: _ID _RARROW $@6 • _LPAREN lambda_arguments _RPAREN

    _LPAREN  shift, and go to state 70


State 63

   39 function_call: _ID $@5 _LPAREN • argument _RPAREN

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40

    $default  reduce using rule 45 (argument)

    num_exp        go to state 71
    exp            go to state 42
    literal        go to state 43
    function_call  go to state 44
    lambda_call    go to state 45
    argument       go to state 72


State 64

   35 exp: _LPAREN num_exp _RPAREN •

    $default  reduce using rule 35 (exp)


State 65

   30 num_exp: num_exp _AROP exp •

    $default  reduce using rule 30 (num_exp)


State 66

   28 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON •

    $default  reduce using rule 28 (assignment_statement)


State 67

    7 lambda_statement: _LAMBDA _ID $@2 _ASSIGN • lambda_exp

    _LAMBDA  shift, and go to state 73

    lambda_exp  go to state 74


State 68

   52 rel_exp: num_exp _RELOP • num_exp

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40

    num_exp        go to state 75
    exp            go to state 42
    literal        go to state 43
    function_call  go to state 44
    lambda_call    go to state 45


State 69

   51 if_part: _IF _LPAREN @7 rel_exp $@8 • _RPAREN statement

    _RPAREN  shift, and go to state 76


State 70

   41 lambda_call: _ID _RARROW $@6 _LPAREN • lambda_arguments _RPAREN

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40

    num_exp           go to state 77
    exp               go to state 42
    literal           go to state 43
    function_call     go to state 44
    lambda_call       go to state 45
    lambda_arguments  go to state 78
    lambda_argument   go to state 79


State 71

   30 num_exp: num_exp • _AROP exp
   46 argument: num_exp •

    _AROP  shift, and go to state 55

    $default  reduce using rule 46 (argument)


State 72

   39 function_call: _ID $@5 _LPAREN argument • _RPAREN

    _RPAREN  shift, and go to state 80


State 73

    9 lambda_exp: _LAMBDA • _LPAREN lambda_parameters $@3 _RPAREN _COLON num_exp _SEMICOLON

    _LPAREN  shift, and go to state 81


State 74

    7 lambda_statement: _LAMBDA _ID $@2 _ASSIGN lambda_exp •

    $default  reduce using rule 7 (lambda_statement)


State 75

   30 num_exp: num_exp • _AROP exp
   52 rel_exp: num_exp _RELOP num_exp •

    _AROP  shift, and go to state 55

    $default  reduce using rule 52 (rel_exp)


State 76

   51 if_part: _IF _LPAREN @7 rel_exp $@8 _RPAREN • statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _LAMBDA    shift, and go to state 28

    lambda_statement      go to state 29
    statement             go to state 82
    compound_statement    go to state 31
    assignment_statement  go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 77

   30 num_exp: num_exp • _AROP exp
   44 lambda_argument: num_exp •

    _AROP  shift, and go to state 55

    $default  reduce using rule 44 (lambda_argument)


State 78

   41 lambda_call: _ID _RARROW $@6 _LPAREN lambda_arguments • _RPAREN
   43 lambda_arguments: lambda_arguments • _COMMA lambda_argument

    _RPAREN  shift, and go to state 83
    _COMMA   shift, and go to state 84


State 79

   42 lambda_arguments: lambda_argument •

    $default  reduce using rule 42 (lambda_arguments)


State 80

   39 function_call: _ID $@5 _LPAREN argument _RPAREN •

    $default  reduce using rule 39 (function_call)


State 81

    9 lambda_exp: _LAMBDA _LPAREN • lambda_parameters $@3 _RPAREN _COLON num_exp _SEMICOLON

    _TYPE  shift, and go to state 85

    lambda_parameters  go to state 86
    lambda_parameter   go to state 87


State 82

   51 if_part: _IF _LPAREN @7 rel_exp $@8 _RPAREN statement •

    $default  reduce using rule 51 (if_part)


State 83

   41 lambda_call: _ID _RARROW $@6 _LPAREN lambda_arguments _RPAREN •

    $default  reduce using rule 41 (lambda_call)


State 84

   43 lambda_arguments: lambda_arguments _COMMA • lambda_argument

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40

    num_exp          go to state 77
    exp              go to state 42
    literal          go to state 43
    function_call    go to state 44
    lambda_call      go to state 45
    lambda_argument  go to state 88


State 85

   12 lambda_parameter: _TYPE • _ID

    _ID  shift, and go to state 89


State 86

    9 lambda_exp: _LAMBDA _LPAREN lambda_parameters • $@3 _RPAREN _COLON num_exp _SEMICOLON
   11 lambda_parameters: lambda_parameters • _COMMA lambda_parameter

    _COMMA  shift, and go to state 90

    $default  reduce using rule 8 ($@3)

    $@3  go to state 91


State 87

   10 lambda_parameters: lambda_parameter •

    $default  reduce using rule 10 (lambda_parameters)


State 88

   43 lambda_arguments: lambda_arguments _COMMA lambda_argument •

    $default  reduce using rule 43 (lambda_arguments)


State 89

   12 lambda_parameter: _TYPE _ID •

    $default  reduce using rule 12 (lambda_parameter)


State 90

   11 lambda_parameters: lambda_parameters _COMMA • lambda_parameter

    _TYPE  shift, and go to state 85

    lambda_parameter  go to state 92


State 91

    9 lambda_exp: _LAMBDA _LPAREN lambda_parameters $@3 • _RPAREN _COLON num_exp _SEMICOLON

    _RPAREN  shift, and go to state 93


State 92

   11 lambda_parameters: lambda_parameters _COMMA lambda_parameter •

    $default  reduce using rule 11 (lambda_parameters)


State 93

    9 lambda_exp: _LAMBDA _LPAREN lambda_parameters $@3 _RPAREN • _COLON num_exp _SEMICOLON

    _COLON  shift, and go to state 94


State 94

    9 lambda_exp: _LAMBDA _LPAREN lambda_parameters $@3 _RPAREN _COLON • num_exp _SEMICOLON

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40

    num_exp        go to state 95
    exp            go to state 42
    literal        go to state 43
    function_call  go to state 44
    lambda_call    go to state 45


State 95

    9 lambda_exp: _LAMBDA _LPAREN lambda_parameters $@3 _RPAREN _COLON num_exp • _SEMICOLON
   30 num_exp: num_exp • _AROP exp

    _SEMICOLON  shift, and go to state 96
    _AROP       shift, and go to state 55


State 96

    9 lambda_exp: _LAMBDA _LPAREN lambda_parameters $@3 _RPAREN _COLON num_exp _SEMICOLON •

    $default  reduce using rule 9 (lambda_exp)
